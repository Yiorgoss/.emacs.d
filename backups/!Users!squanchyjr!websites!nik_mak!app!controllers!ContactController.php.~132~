<?php
use Phalcon\Validation;
use Phalcon\Validation\Validator\Email;
use Phalcon\Validation\Validator\PresenceOf;

class ContactController extends ControllerBase
{
    public function initialize()
    {
        $this->tag->setTitle('Contact us');
       
    }
    public function indexAction()
    {
        // $this->view->form = new ContactForm;/
        $this->view->pick('contact/index');
        $this->assets->addCss('css/contact.css');

    }
    public function testInput($field){
        $field = trim($field);
        $field = stripslashes($field);
        $field = htmlspecialchars($field);

        return $field;
    }
    public function sendAction()
    {
        require_once '../../vendor/autoload.php';
        
        $name = $email = $subject = '';
        if ($_SERVER["REQUEST_METHOD"] == "POST") {
            if(empty($_POST['name'])){
                $this->flashSession->error('The "Name" field cannot be empty');
                return $this->response->redirect("contact");
            } else {
                $name = testInput($_POST('name'));
                // $name = $_POST['name'];
                // $name = trim($name);
                // $name = stripslashes($name);
                // $name = htmlspecialchars($name);
            }
            
            if(empty($_POST['email'])){
                $this->flashSession->error('The "Email" field cannot be empty');
                return $this->response->redirect('contact');
            } else {
                $email = $_POST['email'];
                $email = trim($email);
                $email = stripslashes($email);
                $email = htmlspecialchars($email);
            }

            if(empty($_POST['subject'])){
                $this->flashSession->error('The "Subject" field cannot be empty');
                return $this->response->redirect('contact');
            } else {
                $subject = $_POST['subject'];
                $subject = trim($subject);
                $subject = stripslashes($subject);
                $subject = htmlspecialchars($subject);
            }
            
        }
        $content = $name . "\n" . $email . "\n" . $subject;
        // Create the Transport
        $transport = (new Swift_SmtpTransport('smtp.gmail.com', 587, 'tls'))
                   ->setAuthMode('login')
                   ->setUsername('nikolas.website.notifier@gmail.com')
                   ->setPassword('B6699f5pd');

        // Create the Mailer using your created Transport
        $mailer = new Swift_Mailer($transport);

        // Create a message
        $message = (new Swift_Message('Email From Website'))
                 ->setFrom(['Website.Notifier@AWS.com' => 'Website Notifier'])
                 ->setTo(['makridakisyiorgos@gmail.com'])
                 ->setBody($content);

        $result = $mailer->send($message);
        $this->response->redirect('');
    }

} 
